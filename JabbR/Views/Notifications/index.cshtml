@using JabbR
@using JabbR.ViewModels
@using PagedList
@model NotificationsViewModel

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>JabbR - notifications</title>
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/font-awesome.min.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Chat.css")" rel="stylesheet" />
</head>
<body>
    <section id="page" role="application">
        <header id="heading" role="heading">
            <div class="banner" role="banner">
                <h1>Jabb</h1>
                <div class="jabbrLogo" id="logo"></div>
                <div>
                    Powered by <a href="https://github.com/SignalR/SignalR" target="_blank">SignalR</a>
                </div>
            </div>
            <div style="clear: both"></div>
        </header>
        <div class="container">
            <div class="row" style="padding-top: 75px;">
                @Html.AlertMessages()
                <div class="span2">
                    <ul class="nav nav-list">
                        <li class="nav-header">Notifications</li>
                        <li class="@(!Model.ShowAll ? "active" : "")">
                            <a href="@Url.Content("~/notifications")">Unread <span id="js-unread-counter" data-unread="@Model.UnreadCount" class="pull-right">@Model.UnreadCount</span></a>
                        </li>
                        <li class="@(Model.ShowAll ? "active" : "")">
                            <a href="@Url.Content("~/notifications?all=true")">All Notifications</a>
                        </li>
                    </ul>
                </div>
                <div class="span10">
                    <ul id="notifications-container" data-mode="@(Model.ShowAll ? "all" : "unread")">
                        @foreach (var notification in Model.Notifications)
                        {
                            var note = notification as NotificationViewModel;
                            <li data-notification-id="@note.NotificationKey">
                                <ul class="inline">
                                    <li>@note.RoomName</li>
                                    <li>@note.FromUserName</li>
                                    <li class="user">
                                        <img class="gravatar" src="https://secure.gravatar.com/avatar/@note.FromUserImage?s=16&amp;d=mm" />
                                    </li>
                                    @if (!note.Read)
                                    {
                                        <li>
                                            <a href="#" class="js-mark-as-read" data-action-url="@Url.Content("~/notifications/markasread")" data-notification-id="@note.NotificationKey"><i class="icon-remove-circle"></i></a>
                                        </li>
                                    }
                                </ul>
                                <h4>@note.Message</h4>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </section>
    <script src="@Url.Content("~/Scripts/jquery-1.9.0.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap.min.js")"></script>
    <script type="text/javascript">
        (function ($) {
            var unreadCounter = null,
                notificationsMode = null;
            
            var UnreadCounter = (function () {
                var $unreadCounter = null,
                    count = null;

                return {
                    init: function(selector) {
                        $unreadCounter = $(selector);
                        count = $unreadCounter.data('unread');
                        return this;
                    },
                    set: function (newCount) {
                        count = newCount;
                        $unreadCounter.text(count);
                        $unreadCounter.data('unread', count);
                    },
                    get: function() {
                        return count;
                    }
                };
            }());

            unreadCounter = UnreadCounter.init('#js-unread-counter');
            notificationsMode = $('#notifications-container').data('mode');

            $('#notifications-container').on('click', '.js-mark-as-read', function(ev) {
                var $this = $(this),
                    dataUrl = $this.data('actionUrl'),
                    notificationId = $this.data('notificationId');

                ev.preventDefault();

                var readMention = $.ajax(dataUrl, {
                    type: "POST",
                    dataType: "json",
                    data: {
                        notificationId: notificationId
                    }
                });

                readMention.done(function () {
                    var $anchorParent = null,
                        $notificationToRemove = null;
                    
                    if (notificationsMode === 'unread') {
                        $notificationToRemove = $('li[data-notification-id="' + notificationId + '"]');

                        $notificationToRemove.fadeOut('slow', function() {
                            $notificationToRemove.remove();
                            unreadCounter.set(unreadCounter.get() - 1);
                        });
                    } else { // remove the action anchor
                        $anchorParent = $this.parent();
                        
                        $anchorParent.fadeOut('slow', function () {
                            $anchorParent.remove();
                        });
                    }
                });

                readMention.fail(function() {
                    console.log('failed to mark notification as read', 'notification id: ', notificationId);
                });
            });
        }(jQuery));
    </script>
</body>
</html>
